# generates Console.Generated.cs

Remove-Item -ErrorAction Ignore -Path ./Log73.Generated.cs
$global:str = [System.Text.StringBuilder]::new()
function AppendLine {
    param(
        [string]
        $value
    )
    $global:str.AppendLine($value)
}

AppendLine "// this file is generated by generate.ps1"
AppendLine "namespace Log73;"
AppendLine "public static partial class Console {"

#         /// <summary>
# /// Logs the <paramref name="value"/> using the <see cref="MessageTypes.Warn"/> <see cref="MessageType"/>.
# /// </summary>
# /// <param name="value"></param>
# public static void Warn(object value)
#     => Log(MessageTypes.Warn, value);

function DoConsole {
    param(
        [string]
        $type,
        [string]
        $messageType
    )
#    AppendLine "/// <inheritdoc cref=`"Log73Logger.$messageType($($type.Replace("?", [string]::Empty)))`"/>"
    AppendLine "public static void $messageType($type value)"
    AppendLine "=> Logger.$messageType(value);"
}

$types = @("object?", "string?", "ReadOnlySpan<char>")
foreach ($type in $types) {
    $messageTypes = @("Info", "Warn", "Error", "Debug", "WriteLine")
    foreach ($messageType in $messageTypes) {
        DoConsole -type $type -messageType $messageType
    }
}
AppendLine "}"
Set-Content -Path ./Console.Generated.cs -Value $global:str.ToString()


Remove-Item -ErrorAction Ignore -Path ./Log73Logger.Generated.cs
$global:str = [System.Text.StringBuilder]::new()


AppendLine "// this file is generated by generate.ps1"
AppendLine "namespace Log73;"
AppendLine "public partial class Log73Logger {"

function DoLogger {
    param(
        [string]
        $type,
        [string]
        $messageType
    )
    # todo: maybe xmldoc for these methods
    AppendLine "public void $messageType($type value)"
    # maybe another type for ISpanFormatable or smth
    AppendLine "=> PreWrite(value$(if($type -eq "object?"){".ToString()"}else{[string]::Empty}), LogTypes.$messageType);"
}

$types = @("object?", "string?", "ReadOnlySpan<char>")
foreach ($type in $types) {
    $messageTypes = @("Info", "Warn", "Error", "Debug", 'WriteLine')
    foreach ($messageType in $messageTypes) {
        DoLogger -type $type -messageType $messageType
    }
}

AppendLine "}"

Set-Content -Path ./Log73Logger.Generated.cs -Value $global:str.ToString()